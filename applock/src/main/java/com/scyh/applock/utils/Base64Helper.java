package com.scyh.applock.utils;

public class Base64Helper {
    private static char[] a = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/', '='};;
    private static byte[] b= new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};;

    public static String encode(byte[] arg1) {
        return a(arg1, arg1.length);
    }

    public static byte[] decode(String arg8) {
        int v1 = 0;
        int v2 = b(arg8);
        int v0 = v2 / 4 * 3;
        if(v2 % 4 == 3) {
            v0 += 2;
        }

        if(v2 % 4 == 2) {
            ++v0;
        }

        byte[] v5 = new byte[v0];
        v0 = 0;
        v2 = 0;
        int v3 = 0;
        while(v0 < arg8.length()) {
            int v4 = arg8.charAt(v0);
            v4 = v4 > 255 ? -1 : b[v4];
            if(v4 >= 0) {
                int v6 = v2 << 6;
                v2 = v3 + 6;
                v3 = v6 | v4;
                if(v2 >= 8) {
                    v4 = v2 - 8;
                    v5[v1] = ((byte)(v3 >> v4 & 255));
                    ++v1;
                    v2 = v3;
                    v3 = v4;
                }
                else {
                    int v7 = v3;
                    v3 = v2;
                    v2 = v7;
                }
            }
            ++v0;
        }

        byte[] v0_1 = v1 != v5.length ? null : v5;
        return v0_1;
    }

    public static String a(byte[] arg11, int arg12) {
        int v1;
        int v5;
        int v4 = 64;
        char[] v8 = new char[(arg12 + 2) / 3 * 4];
        int v6 = 0;
        int v7;
        for(v7 = 0; v7 < arg12; v7 += 3) {
            int v0 = (arg11[v7] & 255) << 8;
            if(v7 + 1 < arg12) {
                v0 |= arg11[v7 + 1] & 255;
                v5 = 1;
            }
            else {
                v5 = 0;
            }

            v0 <<= 8;
            if(v7 + 2 < arg12) {
                v0 |= arg11[v7 + 2] & 255;
                v1 = 1;
            }
            else {
                v1 = 0;
            }

            int v9 = v6 + 3;
            char[] v10 = a;
            v1 = v1 != 0 ? v0 & 63 : v4;
            v8[v9] = v10[v1];
            v1 = v0 >> 6;
            v9 = v6 + 2;
            v10 = a;
            v0 = v5 != 0 ? v1 & 63 : v4;
            v8[v9] = v10[v0];
            v0 = v1 >> 6;
            v8[v6 + 1] = a[v0 & 63];
            v8[v6] = a[v0 >> 6 & 63];
            v6 += 4;
        }

        return new String(v8);
    }

    private static int b(String arg4) {
        int v1 = arg4.length();
        int v0;
        for(v0 = 0; v0 < arg4.length(); ++v0) {
            int v2 = arg4.charAt(v0);
            if(v2 > 255 || b[v2] < 0) {
                --v1;
            }
        }

        return v1;
    }
}

